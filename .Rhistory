library(ggExtra)
install.packages(ggExtra)
sharktankdata <- read.csv("C:\Users\tenni\Documents\GitHub\Shark-Tank-Assistant\Data\Shark Tank US dataset.csv", header=TRUE, stringsAsFactors=FALSE)
sharktankdata <- read.csv("C:\Users\tenni\Documents\GitHub\Shark-Tank-Assistant\Data\SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
sharktankdata <- read.csv("C:\Users\tenni\Documents\GitHub\Shark-Tank-Assistant\Data\SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
sharktankdata <- read.csv("\Users\tenni\Documents\GitHub\Shark-Tank-Assistant\Data\SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
sharktankdata <- read.csv("Users\tenni\Documents\GitHub\Shark-Tank-Assistant\Data\SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
sharktankdata <- read.csv("...Data\SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
sharktankdata <- read.csv("...Data/SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
sharktankdata <- read.csv("/Users/tenni/Documents\GitHub\Shark-Tank-Assistant\Data\SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
sharktankdata <- read.csv("/Users/tenni/Documents/GitHub/Shark-Tank-Assistant/Data/SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
library(shiny)
library(bslib)
library(dplyr)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggExtra")
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(ggExtra)
sharktankdata <- read.csv("/Users/tenni/Documents/GitHub/Shark-Tank-Assistant/Data/SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
View(sharktankdata)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(ggExtra)
# Chunk 3
sharktankdata <- read.csv("/Users/tenni/Documents/GitHub/Shark-Tank-Assistant/Data/SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
# Chunk 4: eruptions
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
# Chunk 5: tabsets
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(ggExtra)
# Chunk 3
sharktankdata <- read.csv("/Users/tenni/Documents/GitHub/Shark-Tank-Assistant/Data/SharkTankUSdataset.csv", header=TRUE, stringsAsFactors=FALSE)
# Chunk 4: eruptions
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
# Chunk 5: tabsets
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
airport_routes <- read.csv("airport_routes.csv")
airport_routes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/airport_routes.csv")
View(airport_routes)
movie_votes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/movie_votes.csv")
install.packages('poweRlaw')
install.packages("MASS")
library(MASS)
alpha_estimate <- estimate_xmin(pl_dist)
alpha_estimate <- estimate_xmin(pl_dist)
#calculating alpha for power law
pl_dist <- displ$new(airport_routes)
# Create a discrete distribution object
pl_dist <- displ$new(airport_routes)
install.packages("poweRlaw")
# Estimate the α parameter
alpha_estimate <- estimate_xmin(pl_dist)
# Create a discrete distribution object
pl_dist <- displ$new(airport_routes$NumberofRoutes)
# Estimate the α parameter
alpha_estimate <- estimate_xmin(pl_dist)
#loading packages to be used
library(poweRlaw)
library(ggplot2)
library(MASS)
#bringing in the datasets
airport_routes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/airport_routes.csv")
movie_votes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/movie_votes.csv")
#calculating alpha for power law
# Create a discrete distribution object
pl_dist <- displ$new(airport_routes$NumberofRoutes)
#loading packages to be used
library(poweRlaw)
library(ggplot2)
library(MASS)
#bringing in the datasets
airport_routes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/airport_routes.csv")
movie_votes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/movie_votes.csv")
#calculating alpha for power law
# Create a discrete distribution object
pl_dist <- displ$new(airport_routes)
#loading packages to be used
library(poweRlaw)
library(ggplot2)
library(MASS)
#bringing in the datasets
airport_routes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/airport_routes.csv")
movie_votes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/movie_votes.csv")
#calculating alpha for power law
# Create a discrete distribution object
pl_dist <- displ$new(airport_routes$NumberOfRoutes)
# Estimate the α parameter
alpha_estimate <- estimate_xmin(pl_dist)
alpha_estimate
print(alpha_estimate)
print(alpha_estimate$xmin)
airport_routes <- airport_routes[order(airport_routes$NumberOfRoutes, decreasing = TRUE),]
View(airport_routes)
movie_votes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/movie_votes.csv")
movie_votes <- movie_votes[order(movie_votes$AverageVote, decreasing = TRUE), ]
View(movie_votes)
#loading packages to be used
library(poweRlaw)
library(ggplot2)
library(MASS)
#bringing in the datasets and sorting in descending order
airport_routes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/airport_routes.csv")
airport_routes <- airport_routes[order(airport_routes$NumberOfRoutes, decreasing = TRUE),]
movie_votes <- read.csv("C:/Users/tenni/Documents/Fall 2023/CSDS313/movie_votes.csv")
movie_votes <- movie_votes[order(movie_votes$AverageVote, decreasing = TRUE), ]
#calculating alpha for power law
# Create a discrete distribution object
pl_dist <- displ$new(airport_routes$NumberOfRoutes)
# Estimate the α parameter
alpha_estimate <- estimate_xmin(pl_dist)
print(alpha_estimate$xmin)
airport_routes <- airport_routes[order(airport_routes$NumberOfRoutes, decreasing = TRUE),]
View(airport_routes)
# Create a discrete distribution object
pl_dist <- displ$new(airport_routes$NumberOfRoutes)
# Estimate the α parameter
alpha_estimate <- estimate_xmin(pl_dist)
print(alpha_estimate$xmin)
xmin_fit <- estimate_xmin(airport_routes$NumberOfRoutes, method = "Clauset")
xmin_fit <- find_xmin(airport_routes$NumberOfRoutes)
install.packages("VGAM")
library(VGAM)
# Estimate the alpha parameter using Newman's method
fit <- rrvglm(airport_routes$NumberOfRoutes ~ 1, family = vpareto, trace = TRUE)
